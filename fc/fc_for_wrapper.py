from CoolProp.CoolProp import PropsSI
import numpy as np
import fuel_cell_info
import flight_condition
import hydrogen_storage

import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.join(current_dir, '..')
sys.path.insert(0, os.path.abspath(parent_dir))

import global_constants as gc


def get_fc_efficiency(Throttle):
    """
    Efficiency function from other file
    """
    return 0.5  # Placeholder for actual efficiency calculation



'''
A class which contains the fuel cell characteristics and calculates the power output based on the flight conditions and hydrogen storage.
'''

class FuelCell:
    def __init__(self, name, power_req_max, TOGA_throttle = 0.85):
        """
        Initialize the FuelCell class with the maximum power required and throttle setting.
        Args:
            power_req_max (float): Maximum power required by the fuel cell in watts.
            TOGA_throttle (float): Throttle setting for Take-Off/Go-Around, default is 0.85 (for initial FPP run).
        """
        self.name = name
        self.power_max_throttle = power_req_max / TOGA_throttle # [W] Maximum power output of the fuel cell at full throttle setting
        self.power_req_max = power_req_max  # [W] Maximum power required by the fuel cell
        self.power_min = self.power_max_throttle * 0.09 # NOTE: 9% of max, taken from literature
        self.fc_mass = self.power_max_throttle / gc.mass_specific_power  # [kg] Mass of the fuel cell stack
        self.fc_volume = self.power_max_throttle / gc.volume_specific_power
        
    def get_TMS_spec(self):
        """
        Get the specific mass flow rate of hydrogen for the fuel cell.
        Returns:
            float: Specific mass flow rate of hydrogen in kg/s.
        """
        efficiency = get_fc_efficiency()  # Get the efficiency based on the throttle setting
        m_H2_sp = 1 / (gc.LHV_H2 * efficiency)  # [kg/s/W] Specific mass flow rate of hydrogen for the fuel cell
        m_air_in_sp = m_H2_sp / gc.stoic_ratio_A * gc.stoic_ratio_C * 15.999 / 2.01568 / 0.2314  # [kg/s/W] Specific mass flow rate of air for the fuel cell
        m_air_out_sp = m_air_in_sp + m_H2_sp  # [kg/s/W] Specific mass flow rate of air out of the fuel cell
        m_H20_sp = m_H2_sp * 18.01528 / 2.01568  # [kg/s/W] Specific mass flow rate of water produced by the fuel cell
        Qdot_FC_sp = (1 - efficiency) / efficiency   # [W/W] Heat generated by the fuel cell per watt of power output
        m_H2_recirculation_sp = self.m_H2_sp * (gc.stoic_ratio_A - 1)



        return Qdot_FC_sp, m_H2_sp, m_air_in_sp, m_air_out_sp, m_H20_sp, m_H2_recirculation_sp

    def get_TMS_values(self, power=None):
        """
        Get the thermal management system (TMS) values for the fuel cell.
        Returns:
            tuple: Contains the heat generation rate (Q_dot_FC) and the mass flows in/out of the fuel cell.
        """

        if power is None:
            power = self.power_req_max
            efficiency = get_fc_efficiency()
        else:
            efficiency = get_fc_efficiency(power / self.power_max_throttle)

        # Calculate the heat generated by the fuel cell
        self.Qdot_FC = power * (1 - efficiency) / efficiency  # [W] Heat generated by the fuel cell

        # Calculate the mass flow rate of hydrogen required for the fuel cell
        self.m_H2_FC = power / (gc.LHV_H2 * efficiency)  # [kg/s] Mass flow rate of hydrogen in the fuel cell
        
        # Calculate the mass flow rate of air required for the fuel cell
        self.m_air_FC_in = self.m_H2_FC * gc.stoic_ratio_C

        # Calculate the mass flow rate of fluid out of the fuel cell
        self.m_air_FC_out = self.m_air_FC_in + self.m_H2_FC

        # Calculate the mass flow rate of water produced by the fuel cell
        self.m_H20_FC = self.m_H2_FC * 18.01528 / 2.01568  # [kg/s] Mass flow rate of water produced by the fuel cell

        # Calculate the recirculation mass flow rate of hydrogen
        self.m_H2_recirculation = self.m_H2_FC * (gc.stoic_ratio_A - 1)

        return self.Qdot_FC, self.m_H2_FC, self.m_air_FC_in, self.m_air_FC_out, self.m_H20_FC, self.m_H2_recirculation
    



    